// the idea is to find the LCA and caculate the distance from LCA to node 1 and node 2
// and add both the distances

/* A binary tree node
struct Node
{
    int data;
    Node* left, * right;
}; */

bool hasPath(Node *root, vector<int> &v, int &a){
    if(root){
        v.push_back(root->data);
        if(root->data==a){
            return true;
        }
        bool x = hasPath(root->left, v, a);
        if(!x){
            x = hasPath(root->right, v, a);
        }
        if(!x){
            v.pop_back();
            return false;
        }
        return true;
    }
    return false;
}

/* Should return minimum distance between a and b
   in a tree with given root*/
int findDist(Node* root, int a, int b) {
    // Your code here
    vector<int> v1, v2;
    if(!hasPath(root, v1, a) || !hasPath(root, v2, b)){
        return INT_MAX;
    }
    int i=0;
    for(i=0;i<min(v1.size(), v2.size());i++){
        if(v1[i]!=v2[i]){
            break;
        }
    }
    return v1.size()-i + v2.size()-i;
}
