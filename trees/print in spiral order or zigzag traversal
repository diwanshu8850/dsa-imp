https://www.geeksforgeeks.org/zigzag-tree-traversal/

/* A binary tree node has data, pointer to left child
   and a pointer to right child  
struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
}; */

int height(Node *head){
    if(!head){
        return 0;
    }
    return max(height(head->left), height(head->right))+1;
}

void inorder(Node *head, vector< vector<int> > &v, int a){
    if(head){
        inorder(head->left, v, a+1);
        v[a].push_back(head->data);
        inorder(head->right, v, a+1);
    }
}

void printSpiral(Node *root)
{
    //Your code here
    if(root==NULL){
        return;
    }
    
    // to determine the number of levels in the current tree
    int n = height(root);
    
    // to store the values which later on can be reversed accodingly
    vector< vector<int> > v(n, vector<int>());
    
    // to store the correct value in the correct level
    inorder(root,v,0);
    
    // just the reverse the values for zigzag traversal
    for(int i=1;i<n;i+=2){
        reverse(v[i].begin(), v[i].end());
    }
    for(auto i:v){
        for(j:i){
            cout<<j<<" ";
        }
    }
}



================METHOD 2=====================================
using deque to pop the elements either from front or back according to the level

//User function Template for C++
/*Structure of the node of the binary tree is as
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

// return a vector containing the zig zag level order traversal of the given tree
vector <int> zigZagTraversal(Node* root)
{
	// Code here
	vector<int> v;
	if(!root){
	    return v;
	}
	deque<Node*> q;
	q.push_back(root);
	q.push_back(NULL);
	int i=0;
	while(!q.empty()){
   
         // if the level number is divisible by 2 which means we dont have to
         // reverse the level so just simple keep popping from the front untill level ends
         // and keep pushing in the order (left then right) at the back
	    if(i%2==0){
	        Node *t = q.front();
	        q.pop_front();
	        while(t){
	            v.push_back(t->data);
	            if(t->left){
	                q.push_back(t->left);
	            }
	            if(t->right){
	                q.push_back(t->right);
	            }
	            t = q.front();
	            q.pop_front();
	        }
	        if(!q.empty()){
	            q.push_front(t);
	        }
	    }
       
       // if the level is not divisible then we have to reverse the current level
       // so keep popping from the back and push elements to the front in reverse order ( right then left)
       else{
	        Node *t = q.back();
	        q.pop_back();
	        while(t){
	            v.push_back(t->data);
	            if(t->right){
	                q.push_front(t->right);
	            }
	            if(t->left){
	                q.push_front(t->left);
	            }
	            t = q.back();
	            q.pop_back();
	        }
	        if(!q.empty()){
	            q.push_back(t);
	        }
	    }
	    i+=1;
	}
	return v;
}

