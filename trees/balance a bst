=====================================METHOD 1 (using O(n) extra space)======================================
// the idea is to simply store the inorder traversal of the tree and then re-construct the bst from the sorted array

/*Structure of the Node of the BST is as
struct Node
{
	int data;
	Node* left, *right;
};
*/

void inorder(Node *root, vector<int> &v){
    if(root){
        inorder(root->left, v);
        v.push_back(root->data);
        inorder(root->right, v);
        delete(root);
    }
}

Node *buildTree(vector<int> &v, int l, int r){
    if(r>=l){
        int mid = l + (r-l)/2;
        
        // make mid value as root
        Node *root = new Node(v[mid]);
        
        // then recursive call the same thing for its left child and its right child
        // same as binary search
        root->left = buildTree(v, l, mid-1);
        root->right = buildTree(v, mid+1, r);
        return root;
    }
    return NULL;
}

// Your are required to complete this function
// function should return root of the modified BST

Node* buildBalancedTree(Node* root)
{
	// Code here
  
  // store inorder traversal which is sorted
	vector<int> v;
	inorder(root, v);
  
  // construct bst from sorted array
	return buildTree(v,0,v.size()-1);
}
